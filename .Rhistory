monthly_value <- paste0(monthly_value, " zł")
### 2. Cost of living rank nth out of N cities in the world.
# Raw form
rank_index_value <- empNumberNodes[[4]] %>% html_text()
return(list=c("Miesięczne wydatki" = monthly_value, "Index"= rank_index_value))
}
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
runApp('D:/analytics/shiny/nomad_life/exampe.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
source('D:/analytics/shiny/nomad_life/exampe.R')
if (interactive()) {
# A basic shiny app with a plotOutput
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("newplot", "New plot")
),
mainPanel(
plotOutput("plot")
)
)
),
server = function(input, output) {
output$plot <- renderPlot({
input$newplot
# Add a little noise to the cars data
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
}
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
# Koncepcja:
# Barchart wydatków w danym mieście
# Scrape::numbeo -> A single person monthly costs: 2,195.55zł without rent. + Apartment (1 bedroom) Outside of Centre
# Porównaj to z tym na ile Ci wystarczy oszczędności na życie w tym mieście.
# Pytanie czy możliwe łączenie kilku miast i zaplanowanie całego kilkumiastowego wyjazdu
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Volgograd"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value <- str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
monthly_value
#
eurpln            <- 4.26; months            <- 12
pln_total_value   <- 68000
eur_total_value   <- pln_total_value / eurpln
pln_monthly_value <- pln_total_value / months
eur_monthly_value <- eur_total_value / months
city_monthly_value <- eur_monthly_value
available_value <- pln_total_value
for (i in 1:months) {
temp_value      <- available_value[length(available_value)] - city_monthly_value
available_value <- append(available_value, temp_value)
}
available_value <- available_value[-1] %>% round(2)
date_next   <- as.Date("2020-03-01")
## by month
date_seq    <- seq(date_next, by = "month", length.out = months)
date_seq
df <- data.frame("Kwota" <- rep(city_monthly_value, months),
"Data"   <- date_seq,
"Dostepne"   <- available_value)
# Minimal theme + blue fill color
p <- ggplot(data=df, aes(x=Data, y=Dostepne)) +
geom_bar(stat="identity", fill="khaki3") + #, colour = "blue"
geom_bar(data=df, aes(x=Data, y=Kwota),
stat="identity", fill="red", alpha = 0.4) +
theme_minimal()
ggplotly(p)
library(shiny)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggthemes)
library(rvest)
library(selectr)
library(xml2)
library(stringr)
library(RCurl)
# Koncepcja:
# Barchart wydatków w danym mieście
# Scrape::numbeo -> A single person monthly costs: 2,195.55zł without rent. + Apartment (1 bedroom) Outside of Centre
# Porównaj to z tym na ile Ci wystarczy oszczędności na życie w tym mieście.
# Pytanie czy możliwe łączenie kilku miast i zaplanowanie całego kilkumiastowego wyjazdu
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Volgograd"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value <- str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
monthly_value
#
eurpln            <- 4.26; months            <- 12
pln_total_value   <- 68000
eur_total_value   <- pln_total_value / eurpln
pln_monthly_value <- pln_total_value / months
eur_monthly_value <- eur_total_value / months
city_monthly_value <- eur_monthly_value
available_value <- pln_total_value
for (i in 1:months) {
temp_value      <- available_value[length(available_value)] - city_monthly_value
available_value <- append(available_value, temp_value)
}
available_value <- available_value[-1] %>% round(2)
#available_value[length(available_value)] <- 800
date_next   <- as.Date("2020-03-01")
## by month
date_seq    <- seq(date_next, by = "month", length.out = months)
date_seq
df <- data.frame("Kwota" <- rep(city_monthly_value, months),
"Data"   <- date_seq,
"Dostepne"   <- available_value)
# Minimal theme + blue fill color
p <- ggplot(data=df, aes(x=Data, y=Dostepne)) +
geom_bar(stat="identity", fill="khaki3") + #, colour = "blue"
geom_bar(data=df, aes(x=Data, y=Kwota),
stat="identity", fill="red", alpha = 0.4) +
theme_minimal()
ggplotly(p)
library(plotly)
# Koncepcja:
# Barchart wydatków w danym mieście
# Scrape::numbeo -> A single person monthly costs: 2,195.55zł without rent. + Apartment (1 bedroom) Outside of Centre
# Porównaj to z tym na ile Ci wystarczy oszczędności na życie w tym mieście.
# Pytanie czy możliwe łączenie kilku miast i zaplanowanie całego kilkumiastowego wyjazdu
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Volgograd"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value <- str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
monthly_value
#
eurpln            <- 4.26; months            <- 12
pln_total_value   <- 68000
eur_total_value   <- pln_total_value / eurpln
pln_monthly_value <- pln_total_value / months
eur_monthly_value <- eur_total_value / months
city_monthly_value <- eur_monthly_value
available_value <- pln_total_value
for (i in 1:months) {
temp_value      <- available_value[length(available_value)] - city_monthly_value
available_value <- append(available_value, temp_value)
}
available_value <- available_value[-1] %>% round(2)
#available_value[length(available_value)] <- 800
date_next   <- as.Date("2020-03-01")
## by month
date_seq    <- seq(date_next, by = "month", length.out = months)
date_seq
df <- data.frame("Kwota" <- rep(city_monthly_value, months),
"Data"   <- date_seq,
"Dostepne"   <- available_value)
# Minimal theme + blue fill color
p <- ggplot(data=df, aes(x=Data, y=Dostepne)) +
geom_bar(stat="identity", fill="khaki3") + #, colour = "blue"
geom_bar(data=df, aes(x=Data, y=Kwota),
stat="identity", fill="red", alpha = 0.4) +
theme_minimal()
ggplotly(p)
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Volgograd"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# Koncepcja:
# Barchart wydatków w danym mieście
# Scrape::numbeo -> A single person monthly costs: 2,195.55zł without rent. + Apartment (1 bedroom) Outside of Centre
# Porównaj to z tym na ile Ci wystarczy oszczędności na życie w tym mieście.
# Pytanie czy możliwe łączenie kilku miast i zaplanowanie całego kilkumiastowego wyjazdu
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Volgograd"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
myNodes[[2]]
myNodes
# Koncepcja:
# Barchart wydatków w danym mieście
# Scrape::numbeo -> A single person monthly costs: 2,195.55zł without rent. + Apartment (1 bedroom) Outside of Centre
# Porównaj to z tym na ile Ci wystarczy oszczędności na życie w tym mieście.
# Pytanie czy możliwe łączenie kilku miast i zaplanowanie całego kilkumiastowego wyjazdu
# `Getting html from the website
# `Now city is input manually, how to fetch all options to  list in shiny?
city <- "Paris"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
monthly_value
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
loc_char
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
loc_char
monthly_value
monthly_value
monthly_value
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value
str_replace(monthly_value, ",", "")
str_replace(monthly_value, ",", "") %>% str_replace("zł", "")
str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric() + 100
str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric() / 100
paste0(str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric() / 1000, " k")
runApp('D:/analytics/shiny/nomad_life/app-work.R')
library(forecast)
Y <- 1:10
ts(Y)
forecast(ets(Y), 12) %>% autoplot()
forecast(ets(Y), 1) %>% autoplot()
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
# Import UI Data
data <- read.csv(file = "D:/analytics/shiny/nomad_life/data/city_list.txt", sep = ",", stringsAsFactors = FALSE)
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
city = "Warsaw"
# Filter data.frame with UI input value - take into account search format in column city_search_bar
city_search_bar <- data_serv[data_serv$City == city, ]
# Import server Data
data_serv <- read.csv(file = "D:/analytics/shiny/nomad_life/data/city_list.txt", sep = ",", stringsAsFactors = FALSE)
# Filter data.frame with UI input value - take into account search format in column city_search_bar
city_search_bar <- data_serv[data_serv$City == city, ]
city_search_bar <- city_search_bar$City_Search_Bar
# Scrape values from numbeo.com
main_values <- getMainValues(city = city_search_bar)
monthly_value    <- main_values[1]
monthly_value
city_monthly_value
monthly_value
runApp('D:/analytics/shiny/nomad_life/app-work.R')
source('D:/analytics/shiny/nomad_life/function.R')
res <- getMainValues()
res[1]
# Scrape city data in numbeo.com
mainURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(mainURL)
mainSource <- getURL(mainURL)
mainSource <- read_html(mainSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
empNumberNodes <- html_nodes(mainSource, ".emp_number" )
### 1. A single person monthly costs without rent.
# Raw form
monthly_value <- empNumberNodes[[2]] %>% html_text()
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value <- str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
### 2. Cost of living rank nth out of N cities in the world.
# Raw form
rank_index_value <- empNumberNodes[[4]] %>% html_text()
monthly_value
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
city <- "Paris"
pURL <- paste0("https://www.numbeo.com/cost-of-living/in/", city)
cat("\n"); cat(pURL)
pSource <- getURL(pURL)
pSource <- read_html(pSource, verbose = TRUE)
# `Find tag based on class .emp_number. Found manually how to systematically search for such values?
myNodes <- html_nodes(pSource, ".emp_number" )
# Raw form
monthly_value <- myNodes[[2]] %>% html_text()
# String cleaning from raw form
loc_char      <- str_locate(monthly_value, "ł")
monthly_value <- substr(monthly_value, 1, loc_char)
monthly_value <- str_replace(monthly_value, ",", "") %>% str_replace("zł", "") %>% as.numeric()
monthly_value
#
eurpln            <- 4.26
months            <- 12
pln_total_value   <- 68000
eur_total_value   <- pln_total_value / eurpln
pln_monthly_value <- pln_total_value / months
eur_monthly_value <- eur_total_value / months
city_monthly_value <- eur_monthly_value
available_value <- pln_total_value
for (i in 1:months) {
temp_value      <- available_value[length(available_value)] - city_monthly_value
available_value <- append(available_value, temp_value)
}
available_value <- available_value[-1] %>% round(2)
#available_value[length(available_value)] <- 800
date_next   <- as.Date("2020-03-01")
## by month
date_seq    <- seq(date_next, by = "month", length.out = months)
date_seq
df <- data.frame("Kwota" <- rep(city_monthly_value, months),
"Data"   <- date_seq,
"Dostepne"   <- available_value)
# Minimal theme + blue fill color
p <- ggplot(data=df, aes(x=Data, y=Dostepne)) +
geom_bar(stat="identity", fill="khaki3") + #, colour = "blue"
geom_bar(data=df, aes(x=Data, y=Kwota),
stat="identity", fill="red", alpha = 0.4) +
theme_minimal()
View(df)
View(df)
p <- ggplot(data=df, aes(x=Data, y=Dostepne)) +
geom_bar(stat="identity", fill="khaki3") + #, colour = "blue"
geom_bar(data=df, aes(x=Data, y=Kwota),
stat="identity", fill="red", alpha = 0.4) +
theme_minimal()
p
ggplotly(p)
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
runApp('D:/analytics/shiny/nomad_life/app-work.R')
shiny::runApp()
ui <- fluidPage(#theme = "bootstrap_dark_violet.css",
includeCSS("header_style.css"),
#Style
setBackgroundColor(
color = c("skyblue", "skyblue"),
gradient = "radial",
direction = "right",
shinydashboard = FALSE
),
#
# App title ----
headerPanel("\nZnajdź swoje Bieszczady!"),
# TRUEre sidebar layout
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Help panel
helpText("Symulacje finansowe wyjazdów z pomocą www.numbeo.com."),
# Select panel (drop-down list)
selectizeInput(inputId = "destination_city",
label = "Wybierz miasto:",
choices = choices,
options = list(create = TRUE,
#optgroups =
placeholder = "wpisz nazwę miasta...")),
sliderInput("user_value_to_spend", "Wskaż kwotę:",
min = 0, max = 100000, step = 1000, value = 24000, post = " zł", ticks = FALSE),
sliderInput("trip_duration_months", "Wskaż liczbę miesięcy wyjazdu:",
min = 0, max = 36, step = 1, value = 12, ticks = TRUE),
actionButton("do", "Uruchom"),
tableOutput("data")
),
mainPanel(
plotlyOutput("plot")
)
)
)
server <- function(input, output, session) {
observeEvent(input$do, {
# Import server Data
data_dict   <- read.csv(file = "D:/analytics/shiny/nomad_life/data/city_list.txt", sep = ",", stringsAsFactors = FALSE)
data_values <- read.csv(file = "D:/analytics/shiny/nomad_life/data/city_data.txt", sep = "\t", stringsAsFactors = FALSE)
data_server <- data_values %>% inner_join(data_dict, by = c("city" = "City_Search_Bar"))
output$data <- renderTable({
# Get UI input$city value
city_chosen <- input$destination_city
# Filter data.frame with UI input value - take into account search format in column city_search_bar
city_data <- data_server %>% filter(City == city_chosen)
# Scrape values from numbeo.com NOT ANYMORE IS FULLY SCRAPED INTO FILE
monthly_value    <- city_data %>% filter(variable == "Miesięczne Wydatki Dla Singla") %>% select(value) %>% as.numeric()
rank_index_value <- city_data %>% filter(variable == "Index Miasta") %>% select(value) %>% as.character()
monthly_rent     <- city_data %>% filter(variable == "Apartment (1 bedroom) Outside of Centre") %>% select(value) %>% as.numeric()
df = data.frame(
"Życie"   = paste0(monthly_value, "zł"),
"Czynsz"  = paste0(monthly_rent, "zł"),
"PLN"     = paste0((monthly_value + monthly_rent), "zł"),
"Index"   = rank_index_value)
})
output$plot <- renderPlotly({
# Get UI input$city value
city_chosen <- input$destination_city
# Filter data.frame with UI input value - take into account search format in column city_search_bar
city_data <- data_server %>% filter(City == city_chosen)
# Scrape values from numbeo.com
#main_values <- getMainValues(city = city_search_bar)
monthly_value     <- city_data %>% filter(variable == "Miesięczne Wydatki Dla Singla") %>% select(value) %>% as.numeric()
monthly_rent      <- city_data %>% filter(variable == "Apartment (1 bedroom) Outside of Centre") %>% select(value) %>% as.numeric()
pln_total_value   <- input$user_value_to_spend
months            <- input$trip_duration_months
pln_monthly_value  <- pln_total_value / months
city_monthly_value <- (monthly_value + monthly_rent) %>% as.numeric()
available_value <- pln_total_value
for (i in 1:months) {
temp_value      <- available_value[length(available_value)] - city_monthly_value
available_value <- append(available_value, temp_value)
}
available_value <- available_value[-1] %>% round(2)
#available_value[length(available_value)] <- 800
date_next   <- as.Date("2020-03-01")
## by month
date_seq    <- seq(date_next, by = "month", length.out = months)
date_seq
df <- data.frame("Kwota"      = rep(city_monthly_value, months),
"Data"       = date_seq,
"Dostepne"   = available_value)
df <- df %>% mutate(PositiveNumber = ifelse(Dostepne > 0, "Yes", "No"))
# Minimal theme + blue fill color
print(
# ggplotly(
#   ggplot(data=df, aes(x=Data, y=Dostepne)) +
#     geom_bar(stat="identity", fill="skyblue") + #, colour = "blue"
#     geom_bar(data=df, aes(x=Data, y=Kwota),
#              stat="identity", fill="red", alpha = 0.4) +
#     theme_minimal()
hide_legend(ggplotly(
ggplot(data=df, aes(x=Data, y=Dostepne, fill = PositiveNumber)) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("Yes" = "skyblue", "No" = "#CC6666")) +
#geom_bar(data=df, aes(x = Data, y=Kwota),
#         stat="identity", fill="red", alpha = 0.5) +
#geom_point(data=df, aes(x=Data, y=Dostepne), color = "red") +
scale_y_continuous(name="Dostępne środki", labels = scales::comma) +
theme_few()
#theme_gdocs()
)) # Plot end
)
})
})
#################
}
#####################################################################
####################### APP RUN #####################################
#####################################################################
library(shiny)
shinyApp(ui, server)
runApp()
